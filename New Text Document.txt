from flask import Flask, jsonify, request
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore
import json
from types import SimpleNamespace
import pandas as pd
import array as arr
import sklearn
from sklearn.decomposition import TruncatedSVD
import numpy as np

cred = credentials.Certificate("D://projectpython/tyhoang/testdemo.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

response = ''
app = Flask(__name__)
@app.route('/',methods = ['GET','POST'])
@app.route('/name',methods = ['GET','POST'])
def nameRoute():
    global response
    # db = firestore.client()
    if(request.method == 'POST'):
        idproduct = request.args.get('idproduct')
        df1 = pd.DataFrame(columns=["ProductID","rating",'UserID'])
        titles = ["veges", "snack", "food", "drink", "dessert"]
        arr = []
        for title in titles:
            emp_ref = db.collection('categoryicon').document('A8JoMU51G5b0O2bdLqTf').collection(title)
            docs = emp_ref.get()
            for doc in docs:
                emp_refs = emp_ref.document(doc.id).collection('rating')
                docs1 = emp_refs.get()
                print(docs1)
        # emp_ref = db.collection('categoryicon')
        # docs = emp_ref.get()
        # arr = []
        # for doc in docs:
        #     emp_refs = db.collection('User').document(doc.id).collection('rating')
        #     docs1 = emp_refs.get()
        #     for doc1 in docs1:
        #         data_items = doc1.to_dict().items()
        #         data_list = list(data_items)
        #         df = pd.DataFrame(data_list, columns = ["ProductID","rating"])
        #         df['UserID'] = df['ProductID'].map(lambda x: doc.id)
        #         df1=pd.concat([df1,df], ignore_index=True)
        #         arr.append('{} => {}'.format(doc.id, doc1.to_dict()))
        # print(df1)
        # df1 = df1.dropna()
        # ratings_utility_matrix = df1.pivot_table(values='rating', index='UserID', columns='ProductID', fill_value=0)
        # X = ratings_utility_matrix.T
        # SVD = TruncatedSVD(n_components=2)
        # decomposed_matrix = SVD.fit_transform(X)
        
        # correlation_matrix = np.corrcoef(decomposed_matrix)
        # product_names = list(X.index)
        # product_ID = product_names.index(idproduct)
        # correlation_product_ID = correlation_matrix[product_ID]
        # Recommend = list(X.index[correlation_product_ID > 0.90])
        # Recommend.remove(i) 
        # response = jsonify(Recommend[0:3])
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    else:
        df1 = pd.DataFrame(columns=["ProductID","rating",'UserID'])
        emp_ref = db.collection('User')
        docs = emp_ref.get()
        arr = []
        for doc in docs:
            emp_refs = db.collection('User').document(doc.id).collection('rating')
            docs1 = emp_refs.get()
            for doc1 in docs1:
                data_items = doc1.to_dict().items()
                data_list = list(data_items)
                df = pd.DataFrame(data_list, columns = ["ProductID","rating"])
                df['UserID'] = df['ProductID'].map(lambda x: doc.id)
                df1=pd.concat([df1,df], ignore_index=True)
                arr.append('{} => {}'.format(doc.id, doc1.to_dict()))
        print(df1)
        df1 = df1.dropna()
        ratings_utility_matrix = df1.pivot_table(values='rating', index='UserID', columns='ProductID', fill_value=0)
        X = ratings_utility_matrix.T
        SVD = TruncatedSVD(n_components=2)
        decomposed_matrix = SVD.fit_transform(X)
        
        correlation_matrix = np.corrcoef(decomposed_matrix)
        i = "gqsda"
        product_names = list(X.index)
        product_ID = product_names.index(i)
        print(product_ID)
        
        correlation_product_ID = correlation_matrix[product_ID]
        Recommend = list(X.index[correlation_product_ID > 0.90])
        Recommend.remove(i) 
        response = jsonify(Recommend[0:3])
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
if __name__ == '__main__':
     app.run(host='127.0.0.1', debug = True)